replit
dark
bretvictor
@article{CogDims,
    author = {T. R. G. Green and M. Petre},
    title = {Usability Analysis of Visual Programming Environments: a `cognitive dimensions' framework},
    journal = {JOURNAL OF VISUAL LANGUAGES AND COMPUTING},
    year = {1996},
    volume = {7},
    pages = {131--174}
}
@inproceedings{Pygmalion,
  title={Pygmalion: a creative programming environment.},
  author={D. C. Smith},
  year={1975}
}
glide
@inproceedings{SnS,
author = {Hempel, Brian and Lubin, Justin and Chugh, Ravi},
title = {Sketch-n-Sketch: Output-Directed Programming for SVG},
year = {2019},
isbn = {9781450368162},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3332165.3347925},
doi = {10.1145/3332165.3347925},
abstract = {For creative tasks, programmers face a choice: Use a GUI and sacrifice flexibility, or write code and sacrifice ergonomics?To obtain both flexibility and ease of use, a number of systems have explored a workflow that we call output-directed programming. In this paradigm, direct manipulation of the program's graphical output corresponds to writing code in a general-purpose programming language, and edits not possible with the mouse can still be enacted through ordinary text edits to the program. Such capabilities provide hope for integrating graphical user interfaces into what are currently text-centric programming environments.To further advance this vision, we present a variety of new output-directed techniques that extend the expressive power of Sketch-n-Sketch, an output-directed programming system for creating programs that generate vector graphics. To enable output-directed interaction at more stages of program construction, we expose intermediate execution products for manipulation and we present a mechanism for contextual drawing. Looking forward to output-directed programming beyond vector graphics, we also offer generic refactorings through the GUI, and our techniques employ a domain-agnostic provenance tracing scheme.To demonstrate the improved expressiveness, we implement a dozen new parametric designs in Sketch-n-Sketch without text-based edits. Among these is the first demonstration of building a recursive function in an output-directed programming setting.},
booktitle = {Proceedings of the 32nd Annual ACM Symposium on User Interface Software and Technology},
pages = {281–292},
numpages = {12},
keywords = {svg, sketch-n-sketch, output-directed programming},
location = {New Orleans, LA, USA},
series = {UIST '19}
}
@inproceedings{10.1145/1094811.1094851,
author = {Edwards, Jonathan},
title = {Subtext: Uncovering the Simplicity of Programming},
year = {2005},
isbn = {1595930310},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1094811.1094851},
doi = {10.1145/1094811.1094851},
abstract = {Representing programs as text strings makes programming harder then it has to be. The source text of a program is far removed from its behavior. Bridging this conceptual gulf is what makes programming so inhumanly difficult -- we are not compilers. Subtext is a new medium in which the representation of a program is the same thing as its execution. Like a spreadsheet, a program is visible and alive, constantly executing even as it is edited. Program edits are coherent semantic transformations.The essence of this new medium is copying. Programs are constructed by copying and executed by copy flow: the projection of changes through copies. The simple idea of copying develops into a rich theory of higher-order continual copying of trees. Notably absent are symbolic names, the workhorse of textual notation, replaced by immediately-bound explicit relationships. Subtext unifies traditionally distinct programming tools and concepts, and enables some novel ones. Ancestral structures are a new primitive data type that combines the features of lists and records, along with unproblematic multiple inheritance. Adaptive conditionals use first-class program edits to dynamically adapt behavior.A prototype implementation shows promise, but calls for much further research. Subtext suggests that we can make programming radically easier, if we are willing to be radical.},
booktitle = {Proceedings of the 20th Annual ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications},
pages = {505–518},
numpages = {14},
keywords = {visual programming, non-textual programming, copying, prototypes},
location = {San Diego, CA, USA},
series = {OOPSLA '05}
}
@article{Subtext,
author = {Edwards, Jonathan},
title = {Subtext: Uncovering the Simplicity of Programming},
year = {2005},
issue_date = {October 2005},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {40},
number = {10},
issn = {0362-1340},
url = {https://doi.org/10.1145/1103845.1094851},
doi = {10.1145/1103845.1094851},
abstract = {Representing programs as text strings makes programming harder then it has to be. The source text of a program is far removed from its behavior. Bridging this conceptual gulf is what makes programming so inhumanly difficult -- we are not compilers. Subtext is a new medium in which the representation of a program is the same thing as its execution. Like a spreadsheet, a program is visible and alive, constantly executing even as it is edited. Program edits are coherent semantic transformations.The essence of this new medium is copying. Programs are constructed by copying and executed by copy flow: the projection of changes through copies. The simple idea of copying develops into a rich theory of higher-order continual copying of trees. Notably absent are symbolic names, the workhorse of textual notation, replaced by immediately-bound explicit relationships. Subtext unifies traditionally distinct programming tools and concepts, and enables some novel ones. Ancestral structures are a new primitive data type that combines the features of lists and records, along with unproblematic multiple inheritance. Adaptive conditionals use first-class program edits to dynamically adapt behavior.A prototype implementation shows promise, but calls for much further research. Subtext suggests that we can make programming radically easier, if we are willing to be radical.},
journal = {SIGPLAN Not.},
month = oct,
pages = {505–518},
numpages = {14},
keywords = {non-textual programming, copying, prototypes, visual programming}
}
@article{Boxer,
author = {diSessa, A. A and Abelson, H.},
title = {Boxer: A Reconstructible Computational Medium},
year = {1986},
issue_date = {Sept. 1986},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {29},
number = {9},
issn = {0001-0782},
url = {https://doi.org/10.1145/6592.6595},
doi = {10.1145/6592.6595},
abstract = {Programming is most often viewed as a way for experts to get computers to perform complex tasks efficiently and reliably. Boxer presents an alternative image—programming as a way for nonexperts to control a reconstructible medium, much like written language, but with dramatically extended interactive capabilities.},
journal = {Commun. ACM},
month = sep,
pages = {859–868},
numpages = {10}
}
HyperCard
@inproceedings{PLrev,
author = {Gabriel, Richard P.},
title = {The Structure of a Programming Language Revolution},
year = {2012},
isbn = {9781450315623},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2384592.2384611},
doi = {10.1145/2384592.2384611},
abstract = {Engineering often precedes science. Incommensurability is real.},
booktitle = {Proceedings of the ACM International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software},
pages = {195–214},
numpages = {20},
keywords = {science, incommensurability, engineering, paradigms},
location = {Tucson, Arizona, USA},
series = {Onward! 2012}
}
@phdthesis{TcherDiss,
    title={Designing and Programming Malleable Software},
    author={Tchernavskij, Philip},
    year={2019},
    school={Université Paris-Saclay, École doctorale nº580 Sciences et Technologies de l'Information et de la Communication (STIC)},
    type={PhD thesis}
}
@inproceedings{KellOS,
author = {Kell, Stephen},
title = {The Operating System: Should There Be One?},
year = {2013},
isbn = {9781450324601},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2525528.2525534},
doi = {10.1145/2525528.2525534},
abstract = {Operating systems and programming languages are often informally evaluated on their conduciveness towards composition. We revisit Dan Ingalls' Smalltalk-inspired position that "an operating system is a collection of things that don't fit inside a language; there shouldn't be one", discussing what it means, why it appears not to have materialised, and how we might work towards the same effect in the postmodern reality of today's systems. We argue that the trajectory of the "file" abstraction through Unix and Plan 9 culminates in a Smalltalk-style object, with other filesystem calls as a primitive metasystem. Meanwhile, the key features of Smalltalk have many analogues in the fragmented world of Unix programming (including techniques at the library, file and socket level). Based on the themes of unifying OS- and language-level mechanisms, and increasing the expressiveness of the meta-system, we identify some evolutionary approaches to a postmodern realisation of Ingalls' vision, arguing that an operating system is still necessary after all.},
booktitle = {Proceedings of the Seventh Workshop on Programming Languages and Operating Systems},
articleno = {8},
numpages = {7},
keywords = {Unix, plan 9, metasystem, integration, composition, binding, smalltalk},
location = {Farmington, Pennsylvania},
series = {PLOS '13}
}
jupyter
coda
@InProceedings{Hazel,
  author =	{Cyrus Omar and Ian Voysey and Michael Hilton and Joshua Sunshine and Claire Le Goues and Jonathan Aldrich and Matthew A. Hammer},
  title =	{{Toward Semantic Foundations for Program Editors}},
  booktitle =	{2nd Summit on Advances in Programming Languages (SNAPL 2017)},
  pages =	{11:1--11:12},
  series =	{Leibniz International Proceedings in Informatics (LIPIcs)},
  ISBN =	{978-3-95977-032-3},
  ISSN =	{1868-8969},
  year =	{2017},
  volume =	{71},
  editor =	{Benjamin S. Lerner and Rastislav Bod{\'i}k and Shriram Krishnamurthi},
  publisher =	{Schloss Dagstuhl--Leibniz-Zentrum fuer Informatik},
  address =	{Dagstuhl, Germany},
  URL =		{http://drops.dagstuhl.de/opus/volltexte/2017/7127},
  URN =		{urn:nbn:de:0030-drops-71273},
  doi =		{10.4230/LIPIcs.SNAPL.2017.11},
  annote =	{Keywords: program editors, type systems, live programming, program prediction}
}
vlhcc
live
px
@inproceedings{Liveness,
author = {Tanimoto, Steven L.},
title = {A Perspective on the Evolution of Live Programming},
year = {2013},
isbn = {9781467362658},
publisher = {IEEE Press},
abstract = {Liveness in programming environments generally refers to the ability to modify a running program. Liveness is one form of a more general class of behaviors by a programming environment that provide information to programmers about what they are constructing. This paper gives a brief historical perspective on liveness and proposes an extension of a hierarchy given in 1990, to now account for even more powerful execution-oriented tools for programmers. In addition, while liveness concerns the timeliness of execution feedback, considering a broader array of forms of feedback is helpful both in better understanding liveness and in designing ever more powerful development tools.},
booktitle = {Proceedings of the 1st International Workshop on Live Programming},
pages = {31–34},
numpages = {4},
keywords = {live coding, software engineering, live programming, tactical prediction, liveness levels, code completion, liveness, program inference, debugging, integrated development environment, software development tools, strategic prediction},
location = {San Francisco, California},
series = {LIVE '13}
}
@inproceedings{KellComm,
author = {Kell, Stephen},
title = {Some Were Meant for C: The Endurance of an Unmanageable Language},
year = {2017},
isbn = {9781450355308},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3133850.3133867},
doi = {10.1145/3133850.3133867},
abstract = { The C language leads a double life: as an application programming language of yesteryear, perpetuated by circumstance; and as a systems programming language which remains a weapon of choice decades after its creation. This essay is a C programmer's reaction to the call to abandon ship. It questions several aspects commonly held to define the experience of using C; these include unsafety, undefined behaviour, and the motivation of performance. It argues all these are in fact inessential; rather, it traces C's ultimate strength to a communicative design which cannot be understood within the usual conception of "a programming language", but can be seen as the antithesis of so-called "managed" languages. This communicativity is understood as facilitating the essential aspect of system-building: creating parts which interact with other remote parts---being "alongside" not "within", and of "alien" origin. },
booktitle = {Proceedings of the 2017 ACM SIGPLAN International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software},
pages = {229–245},
numpages = {17},
keywords = {undefined behavior, virtual machine, managed languages, safety, systems programming},
location = {Vancouver, BC, Canada},
series = {Onward! 2017}
}
memmod
stdesign
despats
@inproceedings{EvProgSys,
  author    = {Jonathan Edwards and Stephen Kell and
               Tomas Petricek and Luke Church},
  title     = {Evaluating programming systems design},
  booktitle = {Proceedings of 30th Annual Workshop of
               Psychology of Programming Interest Group},
  series    = {PPIG 2019},
  location  = {Newcastle, UK},
  year      = {2019}
}
uistguide
@inproceedings{EvUISR,
author = {Olsen, Dan R.},
title = {Evaluating User Interface Systems Research},
year = {2007},
isbn = {9781595936790},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1294211.1294256},
doi = {10.1145/1294211.1294256},
abstract = {The development of user interface systems has languished with the stability of desktop computing. Future systems, however, that are off-the-desktop, nomadic or physical in nature will involve new devices and new software systems for creating interactive applications. Simple usability testing is not adequate for evaluating complex systems. The problems with evaluating systems work are explored and a set of criteria for evaluating new UI systems work is presented.},
booktitle = {Proceedings of the 20th Annual ACM Symposium on User Interface Software and Technology},
pages = {251–258},
numpages = {8},
keywords = {user interface systems evaluation},
location = {Newport, Rhode Island, USA},
series = {UIST '07}
}
@book{Chang,
author = {Chang, Hasok},
year = 2004,
title = {Inventing temperature: Measurement and scientific progress},
publisher = {Oxford University Press},
address = {Oxford},
}
@inproceedings{Webstrates,
author = {Klokmose, Clemens N. and Eagan, James R. and Baader, Siemen and Mackay, Wendy and Beaudouin-Lafon, Michel},
title = {Webstrates: Shareable Dynamic Media},
year = {2015},
isbn = {9781450337793},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2807442.2807446},
doi = {10.1145/2807442.2807446},
abstract = {We revisit Alan Kay's early vision of dynamic media that blurs the distinction between documents and applications. We introduce shareable dynamic media that are malleable by users, who may appropriate them in idiosyncratic ways; shareable among users, who collaborate on multiple aspects of the media; and distributable across diverse devices and platforms. We present Webstrates, an environment for exploring shareable dynamic media. Webstrates augment web technology with real-time sharing. They turn web pages into substrates, i.e. software entities that act as applications or documents depending upon use. We illustrate Webstrates with two implemented case studies: users collaboratively author an article with functionally and visually different editors that they can personalize and extend at run-time; and they orchestrate its presentation and audience participation with multiple devices. We demonstrate the simplicity and generative power of Webstrates with three additional prototypes and evaluate it from a systems perspective.},
booktitle = {Proceedings of the 28th Annual ACM Symposium on User Interface Software & Technology},
pages = {280–290},
numpages = {11},
keywords = {web, real-time collaborative documents, dynamic media},
location = {Charlotte, NC, USA},
series = {UIST '15}
}
@book{Norman,
author = {Norman, Donald A.},
title = {The Design of Everyday Things},
year = {2002},
isbn = {9780465067107},
publisher = {Basic Books, Inc.},
address = {USA},
abstract = {Revealing how smart design is the new competitive frontier, this innovative book is a powerful primer on how--and why--some products satisfy customers while others only frustrate them.}
}
@article{Alg58,
author = {Perlis, A. J. and Samelson, K.},
title = {Preliminary Report: International Algebraic Language},
year = {1958},
issue_date = {Dec. 1958},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {1},
number = {12},
issn = {0001-0782},
url = {https://doi.org/10.1145/377924.594925},
doi = {10.1145/377924.594925},
journal = {Commun. ACM},
month = dec,
pages = {8–22},
numpages = {15}
}
@online{Live13,
url = {http://davidungar.net/Live2013/Live_2013.html},
title = {The thing on the screen is supposed to be the actual thing},
author = {Ungar, David and Smith, Randall B.},
year = 2013,
}
projedit
@book{PaperTools
author = {Klein, Ursula},
title = {Experiments, Models, Paper Tools: Cultures of Organic Chemistry in the Nineteenth Century},
publisher = {Stanford University Press},
year = 2003,
isbn = 9780804743594,
address = {Stanford, CA}
url = {http://www.sup.org/books/title/?id=1917}
}
@online{WIB,
url = {https://www.dreamsongs.com/WorseIsBetter.html},
author = {Gabriel, Richard P.},
title = {Worse Is Better},
year = 1991,
}
@online{MemMod,
url = {http://canonical.org/~kragen/memory-models/},
author = {Sitaker, Kragen Javier},
title = {The Memory Models That Underlie Programming Languages},
year = 2016,
}
@online{BYTEmag,
  title = "BYTE Magazine Volume 6, Number 8",
  url = "https://archive.org/details/byte-magazine-1981-08/",
  year = "1981",
}
