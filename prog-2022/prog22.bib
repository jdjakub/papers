replit
dark
@article{SweImpact,
author = {Ryder, Barbara G. and Soffa, Mary Lou and Burnett, Margaret},
title = {The Impact of Software Engineering Research on Modern Programming Languages},
year = {2005},
issue_date = {October 2005},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {14},
number = {4},
issn = {1049-331X},
url = {https://doi.org/10.1145/1101815.1101818},
doi = {10.1145/1101815.1101818},
journal = {ACM Trans. Softw. Eng. Methodol.},
month = {oct},
pages = {431–477},
numpages = {47},
keywords = {Software Engineering, Programming Languages}
}
@inproceedings{Antifragile,
author = {Monperrus, Martin},
title = {Principles of Antifragile Software},
year = {2017},
isbn = {9781450348362},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3079368.3079412},
doi = {10.1145/3079368.3079412},
abstract = {There are many software engineering concepts and techniques related to software errors. But is this enough? Have we already completely explored the software engineering noosphere with respect to errors and reliability? In this paper, I discuss an novel concept, called "software antifragility", that is unconventional and has the capacity to improve the way we engineer errors and dependability in a disruptive manner. This paper first discusses the foundations of software antifragilty, from classical fault tolerance to the most recent advances on automatic software repair and fault injection in production. This paper then explores the relation between the antifragility of the development process and the antifragility of the resulting software product.},
booktitle = {Companion to the First International Conference on the Art, Science and Engineering of Programming},
articleno = {32},
numpages = {4},
keywords = {automatic software repair, runtime repair, reliability, antifragility, failure injection in production, chaos engineering},
location = {Brussels, Belgium},
series = {Programming '17}
}


@article{LivingWithErrors,
  author    = {Tomas Petricek},
  title     = {Miscomputation in software: Learning to live with errors},
  journal   = {Art Sci. Eng. Program.},
  volume    = {1},
  number    = {2},
  pages     = {14},
  year      = {2017},
  url       = {https://doi.org/10.22152/programming-journal.org/2017/1/14},
  doi       = {10.22152/programming-journal.org/2017/1/14},
  timestamp = {Wed, 17 Feb 2021 08:59:22 +0100},
  biburl    = {https://dblp.org/rec/journals/programming/000117.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
@article{Miscomputation,
  title={Miscomputation},
  author={Fresco, Nir and Primiero, Giuseppe},
  journal={Philosophy \& Technology},
  volume={26},
  number={3},
  pages={253--272},
  year={2013},
  publisher={Springer}
}

@article{MalfunctioningSW,
  title={On malfunctioning software},
  author={Floridi, Luciano and Fresco, Nir and Primiero, Giuseppe},
  journal={Synthese},
  volume={192},
  number={4},
  pages={1199--1220},
  year={2015},
  publisher={Springer}
}

@inproceedings{ChaosMonkey,
  title={Chaos monkey: Increasing sdn reliability through systematic network destruction},
  author={Chang, Michael Alan and Tschaen, Bredan and Benson, Theophilus and Vanbever, Laurent},
  booktitle={Proceedings of the 2015 ACM Conference on Special Interest Group on Data Communication},
  pages={371--372},
  year={2015}
}
@article{PBEExcel,
  title={Spreadsheet data manipulation using examples},
  author={Gulwani, Sumit and Harris, William R and Singh, Rishabh},
  journal={Communications of the ACM},
  volume={55},
  number={8},
  pages={97--105},
  year={2012},
  publisher={ACM New York, NY, USA}
}

@book{PBE,
  author = {Lieberman, H.},
  publisher = {Morgan Kaufmann},
  title = {{Your Wish Is My Command: Programming by Example}},
  year = {2001},
}

@article{ExceptionHandling,
  author    = {John B. Goodenough},
  title     = {Exception Handling: Issues and a Proposed Notation},
  journal   = {Commun. {ACM}},
  volume    = {18},
  number    = {12},
  pages     = {683--696},
  year      = {1975},
  url       = {https://doi.org/10.1145/361227.361230},
  doi       = {10.1145/361227.361230},
  timestamp = {Wed, 09 Oct 2019 16:39:06 +0200},
  biburl    = {https://dblp.org/rec/journals/cacm/Goodenough75.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
@book{HumanError,
  title={Human error},
  author={Reason, James},
  year={1990},
  publisher={Cambridge university press}
}
@proceedings{SelfSustaining2008,
  editor    = {Robert Hirschfeld and
               Kim Rose},
  title     = {Self-Sustaining Systems, First Workshop, {S3} 2008, Potsdam, Germany,
               May 15-16, 2008, Revised Selected Papers},
  series    = {Lecture Notes in Computer Science},
  volume    = {5146},
  publisher = {Springer},
  year      = {2008},
  url       = {https://doi.org/10.1007/978-3-540-89275-5},
  doi       = {10.1007/978-3-540-89275-5},
  isbn      = {978-3-540-89274-8},
  timestamp = {Tue, 14 May 2019 10:00:51 +0200},
  biburl    = {https://dblp.org/rec/conf/s3/2008.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
@proceedings{SelfSustaining2010,
  editor    = {Robert Hirschfeld and
               Hidehiko Masuhara and
               Kim Rose},
  title     = {Workshop on Self-Sustaining Systems, {S3} 2010, Tokyo, Japan, September
               27-28, 2010},
  publisher = {{ACM}},
  year      = {2010},
  url       = {https://doi.org/10.1145/1942793},
  doi       = {10.1145/1942793},
  isbn      = {978-1-4503-0491-7},
  timestamp = {Tue, 06 Nov 2018 16:58:26 +0100},
  biburl    = {https://dblp.org/rec/conf/s3/2010.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
@online{BretVictor,
url = {http://worrydream.com/#!/LearnableProgramming},
author = {Bret Victor},
year = 2012,
title = {Learnable Programming},
}
@inproceedings{AspectJ,
  author    = {Gregor Kiczales and
               Erik Hilsdale and
               Jim Hugunin and
               Mik Kersten and
               Jeffrey Palm and
               William G. Griswold},
  editor    = {J{\o}rgen Lindskov Knudsen},
  title     = {An Overview of AspectJ},
  booktitle = {{ECOOP} 2001 - Object-Oriented Programming, 15th European Conference,
               Budapest, Hungary, June 18-22, 2001, Proceedings},
  series    = {Lecture Notes in Computer Science},
  volume    = {2072},
  pages     = {327--353},
  publisher = {Springer},
  year      = {2001},
  url       = {https://doi.org/10.1007/3-540-45337-7\_18},
  doi       = {10.1007/3-540-45337-7\_18},
  timestamp = {Tue, 14 May 2019 10:00:54 +0200},
  biburl    = {https://dblp.org/rec/conf/ecoop/KiczalesHHKPG01.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
@article{CogDims,
    author = {T. R. G. Green and M. Petre},
    title = {Usability Analysis of Visual Programming Environments: a `cognitive dimensions' framework},
    journal = {JOURNAL OF VISUAL LANGUAGES AND COMPUTING},
    year = {1996},
    volume = {7},
    pages = {131--174}
}
@inproceedings{Pygmalion,
  title={Pygmalion: a creative programming environment.},
  author={D. C. Smith},
  year={1975}
}
glide
@inproceedings{SnS,
author = {Hempel, Brian and Lubin, Justin and Chugh, Ravi},
title = {Sketch-n-Sketch: Output-Directed Programming for SVG},
year = {2019},
isbn = {9781450368162},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3332165.3347925},
doi = {10.1145/3332165.3347925},
abstract = {For creative tasks, programmers face a choice: Use a GUI and sacrifice flexibility, or write code and sacrifice ergonomics?To obtain both flexibility and ease of use, a number of systems have explored a workflow that we call output-directed programming. In this paradigm, direct manipulation of the program's graphical output corresponds to writing code in a general-purpose programming language, and edits not possible with the mouse can still be enacted through ordinary text edits to the program. Such capabilities provide hope for integrating graphical user interfaces into what are currently text-centric programming environments.To further advance this vision, we present a variety of new output-directed techniques that extend the expressive power of Sketch-n-Sketch, an output-directed programming system for creating programs that generate vector graphics. To enable output-directed interaction at more stages of program construction, we expose intermediate execution products for manipulation and we present a mechanism for contextual drawing. Looking forward to output-directed programming beyond vector graphics, we also offer generic refactorings through the GUI, and our techniques employ a domain-agnostic provenance tracing scheme.To demonstrate the improved expressiveness, we implement a dozen new parametric designs in Sketch-n-Sketch without text-based edits. Among these is the first demonstration of building a recursive function in an output-directed programming setting.},
booktitle = {Proceedings of the 32nd Annual ACM Symposium on User Interface Software and Technology},
pages = {281–292},
numpages = {12},
keywords = {svg, sketch-n-sketch, output-directed programming},
location = {New Orleans, LA, USA},
series = {UIST '19}
}
@inproceedings{10.1145/1094811.1094851,
author = {Edwards, Jonathan},
title = {Subtext: Uncovering the Simplicity of Programming},
year = {2005},
isbn = {1595930310},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1094811.1094851},
doi = {10.1145/1094811.1094851},
abstract = {Representing programs as text strings makes programming harder then it has to be. The source text of a program is far removed from its behavior. Bridging this conceptual gulf is what makes programming so inhumanly difficult -- we are not compilers. Subtext is a new medium in which the representation of a program is the same thing as its execution. Like a spreadsheet, a program is visible and alive, constantly executing even as it is edited. Program edits are coherent semantic transformations.The essence of this new medium is copying. Programs are constructed by copying and executed by copy flow: the projection of changes through copies. The simple idea of copying develops into a rich theory of higher-order continual copying of trees. Notably absent are symbolic names, the workhorse of textual notation, replaced by immediately-bound explicit relationships. Subtext unifies traditionally distinct programming tools and concepts, and enables some novel ones. Ancestral structures are a new primitive data type that combines the features of lists and records, along with unproblematic multiple inheritance. Adaptive conditionals use first-class program edits to dynamically adapt behavior.A prototype implementation shows promise, but calls for much further research. Subtext suggests that we can make programming radically easier, if we are willing to be radical.},
booktitle = {Proceedings of the 20th Annual ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications},
pages = {505–518},
numpages = {14},
keywords = {visual programming, non-textual programming, copying, prototypes},
location = {San Diego, CA, USA},
series = {OOPSLA '05}
}
@article{Subtext,
author = {Edwards, Jonathan},
title = {Subtext: Uncovering the Simplicity of Programming},
year = {2005},
issue_date = {October 2005},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {40},
number = {10},
issn = {0362-1340},
url = {https://doi.org/10.1145/1103845.1094851},
doi = {10.1145/1103845.1094851},
abstract = {Representing programs as text strings makes programming harder then it has to be. The source text of a program is far removed from its behavior. Bridging this conceptual gulf is what makes programming so inhumanly difficult -- we are not compilers. Subtext is a new medium in which the representation of a program is the same thing as its execution. Like a spreadsheet, a program is visible and alive, constantly executing even as it is edited. Program edits are coherent semantic transformations.The essence of this new medium is copying. Programs are constructed by copying and executed by copy flow: the projection of changes through copies. The simple idea of copying develops into a rich theory of higher-order continual copying of trees. Notably absent are symbolic names, the workhorse of textual notation, replaced by immediately-bound explicit relationships. Subtext unifies traditionally distinct programming tools and concepts, and enables some novel ones. Ancestral structures are a new primitive data type that combines the features of lists and records, along with unproblematic multiple inheritance. Adaptive conditionals use first-class program edits to dynamically adapt behavior.A prototype implementation shows promise, but calls for much further research. Subtext suggests that we can make programming radically easier, if we are willing to be radical.},
journal = {SIGPLAN Not.},
month = oct,
pages = {505–518},
numpages = {14},
keywords = {non-textual programming, copying, prototypes, visual programming}
}
@article{Boxer,
author = {diSessa, A. A and Abelson, H.},
title = {Boxer: A Reconstructible Computational Medium},
year = {1986},
issue_date = {Sept. 1986},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {29},
number = {9},
issn = {0001-0782},
url = {https://doi.org/10.1145/6592.6595},
doi = {10.1145/6592.6595},
abstract = {Programming is most often viewed as a way for experts to get computers to perform complex tasks efficiently and reliably. Boxer presents an alternative image—programming as a way for nonexperts to control a reconstructible medium, much like written language, but with dramatically extended interactive capabilities.},
journal = {Commun. ACM},
month = sep,
pages = {859–868},
numpages = {10}
}
@book{HyperCard,
author = {Michel, Stephen L.},
title = {Hypercard: The Complete Reference},
address = {Berkeley},
publisher = {Osborne McGraw-Hill},
year = 1989,
}
@phdthesis{Pilot,
title = {PILOT: A Step Toward Man-Computer Symbiosis},
author = {Warren Teitelman},
year = 1966,
publisher = {MIT}
}
@inproceedings{Externalize,
  title={Software and How it Lives On: Embedding Live Programs in the World Around Them},
  author={Antranig Basman and L. Church and C. Klokmose and Colin B. D. Clark},
  booktitle={PPIG},
  year={2016}
}
@inproceedings{ComplementaryBasic,
  title={Complementary science of interactive programming systems},
  author={Tomas Petricek and Joel Jakubovic},
  booktitle={History and Philosophy of Computing},
  year={2021}
}
@inproceedings{PLrev,
author = {Gabriel, Richard P.},
title = {The Structure of a Programming Language Revolution},
year = {2012},
isbn = {9781450315623},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2384592.2384611},
doi = {10.1145/2384592.2384611},
abstract = {Engineering often precedes science. Incommensurability is real.},
booktitle = {Proceedings of the ACM International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software},
pages = {195–214},
numpages = {20},
keywords = {science, incommensurability, engineering, paradigms},
location = {Tucson, Arizona, USA},
series = {Onward! 2012}
}
@phdthesis{TcherDiss,
    title={Designing and Programming Malleable Software},
    author={Tchernavskij, Philip},
    year={2019},
    school={Université Paris-Saclay, École doctorale nº580 Sciences et Technologies de l'Information et de la Communication (STIC)},
    type={PhD thesis}
}
@inproceedings{KellOS,
author = {Kell, Stephen},
title = {The Operating System: Should There Be One?},
year = {2013},
isbn = {9781450324601},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2525528.2525534},
doi = {10.1145/2525528.2525534},
abstract = {Operating systems and programming languages are often informally evaluated on their conduciveness towards composition. We revisit Dan Ingalls' Smalltalk-inspired position that "an operating system is a collection of things that don't fit inside a language; there shouldn't be one", discussing what it means, why it appears not to have materialised, and how we might work towards the same effect in the postmodern reality of today's systems. We argue that the trajectory of the "file" abstraction through Unix and Plan 9 culminates in a Smalltalk-style object, with other filesystem calls as a primitive metasystem. Meanwhile, the key features of Smalltalk have many analogues in the fragmented world of Unix programming (including techniques at the library, file and socket level). Based on the themes of unifying OS- and language-level mechanisms, and increasing the expressiveness of the meta-system, we identify some evolutionary approaches to a postmodern realisation of Ingalls' vision, arguing that an operating system is still necessary after all.},
booktitle = {Proceedings of the Seventh Workshop on Programming Languages and Operating Systems},
articleno = {8},
numpages = {7},
keywords = {Unix, plan 9, metasystem, integration, composition, binding, smalltalk},
location = {Farmington, Pennsylvania},
series = {PLOS '13}
}
coda
@InProceedings{Hazel,
  author =	{Cyrus Omar and Ian Voysey and Michael Hilton and Joshua Sunshine and Claire Le Goues and Jonathan Aldrich and Matthew A. Hammer},
  title =	{{Toward Semantic Foundations for Program Editors}},
  booktitle =	{2nd Summit on Advances in Programming Languages (SNAPL 2017)},
  pages =	{11:1--11:12},
  series =	{Leibniz International Proceedings in Informatics (LIPIcs)},
  ISBN =	{978-3-95977-032-3},
  ISSN =	{1868-8969},
  year =	{2017},
  volume =	{71},
  editor =	{Benjamin S. Lerner and Rastislav Bod{\'i}k and Shriram Krishnamurthi},
  publisher =	{Schloss Dagstuhl--Leibniz-Zentrum fuer Informatik},
  address =	{Dagstuhl, Germany},
  URL =		{http://drops.dagstuhl.de/opus/volltexte/2017/7127},
  URN =		{urn:nbn:de:0030-drops-71273},
  doi =		{10.4230/LIPIcs.SNAPL.2017.11},
  annote =	{Keywords: program editors, type systems, live programming, program prediction}
}
vlhcc
live
px
@inproceedings{Liveness,
author = {Tanimoto, Steven L.},
title = {A Perspective on the Evolution of Live Programming},
year = {2013},
isbn = {9781467362658},
publisher = {IEEE Press},
abstract = {Liveness in programming environments generally refers to the ability to modify a running program. Liveness is one form of a more general class of behaviors by a programming environment that provide information to programmers about what they are constructing. This paper gives a brief historical perspective on liveness and proposes an extension of a hierarchy given in 1990, to now account for even more powerful execution-oriented tools for programmers. In addition, while liveness concerns the timeliness of execution feedback, considering a broader array of forms of feedback is helpful both in better understanding liveness and in designing ever more powerful development tools.},
booktitle = {Proceedings of the 1st International Workshop on Live Programming},
pages = {31–34},
numpages = {4},
keywords = {live coding, software engineering, live programming, tactical prediction, liveness levels, code completion, liveness, program inference, debugging, integrated development environment, software development tools, strategic prediction},
location = {San Francisco, California},
series = {LIVE '13}
}
@inproceedings{KellComm,
author = {Kell, Stephen},
title = {Some Were Meant for C: The Endurance of an Unmanageable Language},
year = {2017},
isbn = {9781450355308},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3133850.3133867},
doi = {10.1145/3133850.3133867},
abstract = { The C language leads a double life: as an application programming language of yesteryear, perpetuated by circumstance; and as a systems programming language which remains a weapon of choice decades after its creation. This essay is a C programmer's reaction to the call to abandon ship. It questions several aspects commonly held to define the experience of using C; these include unsafety, undefined behaviour, and the motivation of performance. It argues all these are in fact inessential; rather, it traces C's ultimate strength to a communicative design which cannot be understood within the usual conception of "a programming language", but can be seen as the antithesis of so-called "managed" languages. This communicativity is understood as facilitating the essential aspect of system-building: creating parts which interact with other remote parts---being "alongside" not "within", and of "alien" origin. },
booktitle = {Proceedings of the 2017 ACM SIGPLAN International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software},
pages = {229–245},
numpages = {17},
keywords = {undefined behavior, virtual machine, managed languages, safety, systems programming},
location = {Vancouver, BC, Canada},
series = {Onward! 2017}
}
@book{DesPats,
author = {Erich Gamma and Richard Helm and Ralph E. Johnson and John Vlissides},
title = {Design Patterns: Elements of Reusable Object-Oriented Software},
address = {Reading, Mass},
publisher = {Addison-Wesley},
year = 1995,
}
@inproceedings{EvProgSys,
  author    = {Jonathan Edwards and Stephen Kell and
               Tomas Petricek and Luke Church},
  title     = {Evaluating programming systems design},
  booktitle = {Proceedings of 30th Annual Workshop of
               Psychology of Programming Interest Group},
  series    = {PPIG 2019},
  location  = {Newcastle, UK},
  year      = {2019}
}
@inproceedings{EvUISR,
author = {Olsen, Dan R.},
title = {Evaluating User Interface Systems Research},
year = {2007},
isbn = {9781595936790},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1294211.1294256},
doi = {10.1145/1294211.1294256},
abstract = {The development of user interface systems has languished with the stability of desktop computing. Future systems, however, that are off-the-desktop, nomadic or physical in nature will involve new devices and new software systems for creating interactive applications. Simple usability testing is not adequate for evaluating complex systems. The problems with evaluating systems work are explored and a set of criteria for evaluating new UI systems work is presented.},
booktitle = {Proceedings of the 20th Annual ACM Symposium on User Interface Software and Technology},
pages = {251–258},
numpages = {8},
keywords = {user interface systems evaluation},
location = {Newport, Rhode Island, USA},
series = {UIST '07}
}
@book{Chang,
author = {Chang, Hasok},
year = 2004,
title = {Inventing temperature: Measurement and scientific progress},
publisher = {Oxford University Press},
address = {Oxford},
}
@inproceedings{Webstrates,
author = {Klokmose, Clemens N. and Eagan, James R. and Baader, Siemen and Mackay, Wendy and Beaudouin-Lafon, Michel},
title = {Webstrates: Shareable Dynamic Media},
year = {2015},
isbn = {9781450337793},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2807442.2807446},
doi = {10.1145/2807442.2807446},
abstract = {We revisit Alan Kay's early vision of dynamic media that blurs the distinction between documents and applications. We introduce shareable dynamic media that are malleable by users, who may appropriate them in idiosyncratic ways; shareable among users, who collaborate on multiple aspects of the media; and distributable across diverse devices and platforms. We present Webstrates, an environment for exploring shareable dynamic media. Webstrates augment web technology with real-time sharing. They turn web pages into substrates, i.e. software entities that act as applications or documents depending upon use. We illustrate Webstrates with two implemented case studies: users collaboratively author an article with functionally and visually different editors that they can personalize and extend at run-time; and they orchestrate its presentation and audience participation with multiple devices. We demonstrate the simplicity and generative power of Webstrates with three additional prototypes and evaluate it from a systems perspective.},
booktitle = {Proceedings of the 28th Annual ACM Symposium on User Interface Software \& Technology},
pages = {280–290},
numpages = {11},
keywords = {web, real-time collaborative documents, dynamic media},
location = {Charlotte, NC, USA},
series = {UIST '15}
}
@book{Norman,
author = {Norman, Donald A.},
title = {The Design of Everyday Things},
year = {2002},
isbn = {9780465067107},
publisher = {Basic Books, Inc.},
address = {USA},
abstract = {Revealing how smart design is the new competitive frontier, this innovative book is a powerful primer on how--and why--some products satisfy customers while others only frustrate them.}
}
@article{Alg58,
author = {Perlis, A. J. and Samelson, K.},
title = {Preliminary Report: International Algebraic Language},
year = {1958},
issue_date = {Dec. 1958},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {1},
number = {12},
issn = {0001-0782},
url = {https://doi.org/10.1145/377924.594925},
doi = {10.1145/377924.594925},
journal = {Commun. ACM},
month = dec,
pages = {8–22},
numpages = {15},
}
@online{Live13,
url = {http://davidungar.net/Live2013/Live_2013.html},
title = {The thing on the screen is supposed to be the actual thing},
author = {Ungar, David and Smith, Randall B.},
year = 2013,
}
projedit
@book{PaperTools,
author = {Klein, Ursula},
title = {Experiments, Models, Paper Tools: Cultures of Organic Chemistry in the Nineteenth Century},
publisher = {Stanford University Press},
year = 2003,
isbn = 9780804743594,
address = {Stanford, CA},
url = {http://www.sup.org/books/title/?id=1917}
}
@online{WIB,
url = {https://www.dreamsongs.com/WorseIsBetter.html},
author = {Gabriel, Richard P.},
title = {Worse Is Better},
year = 1991,
}
@online{Perl,
title = {Perl, the first postmodern computer language},
url = {http://www.wall.org//~larry/pm.html},
author = {Larry Wall},
year = 1999,
}
@online{MemMod,
url = {http://canonical.org/~kragen/memory-models/},
author = {Sitaker, Kragen Javier},
title = {The Memory Models That Underlie Programming Languages},
year = 2016,
}
@online{STdesign,
  title = {Design Principles Behind Smalltalk},
  url = {https://archive.org/details/byte-magazine-1981-08/page/n299/mode/2up},
  year = 1981,
  author = {Daniel Ingalls},
}
@inproceedings{Mythical,
  title={The mythical matched modules: overcoming the tyranny of inflexible software construction},
  author={Stephen Kell},
  booktitle={OOPSLA Companion},
  year={2009}
}
@article{Euphemism,
url = {http://web.stanford.edu/class/cs99r/readings/parnas1.pdf},
title = {Software Aspects of Strategic Defense Systems},
year = 1985,
author = {David Lorge Parnas},
}
@inproceedings{NextGen,
author = {Smaragdakis, Yannis},
title = {Next-Paradigm Programming Languages: What Will They Look like and What Changes Will They Bring?},
year = {2019},
isbn = {9781450369954},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3359591.3359739},
doi = {10.1145/3359591.3359739},
abstract = {The dream of programming language design is to bring about orders-of-magnitude productivity improvements in software development tasks. Designers can endlessly debate on how this dream can be realized and on how close we are to its realization. Instead, I would like to focus on a question with an answer that can be, surprisingly, clearer: what will be the common principles behind next-paradigm, high-productivity programming languages, and how will they change everyday program development? Based on my decade-plus experience of heavy-duty development in declarative languages, I speculate that certain tenets of high-productivity languages are inevitable. These include, for instance, enormous variations in performance (including automatic transformations that change the asymptotic complexity of algorithms); a radical change in a programmer's workflow, elevating testing from a near-menial task to an act of deep understanding; and a change in the need for formal proofs.},
booktitle = {Proceedings of the 2019 ACM SIGPLAN International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software},
pages = {187–197},
numpages = {11},
keywords = {next-paradigm programming languages, programming paradigms},
location = {Athens, Greece},
series = {Onward! 2019}
}
@online{LispCurse,
url = {http://www.winestockwebdesign.com/Essays/Lisp_Curse.html},
title = {The Lisp Curse},
author = {Rudolf Winestock},
year = {2011},
}
@incollection{brooks95aristo,
  title={Aristocracy, Democracy and System Design},
  author={Brooks, FP},
  booktitle={The Mythical Man Month: Essays on Software Engineering},
  year={1995},
  publisher={Addison-Wesley}
}
@inproceedings{DesignedAsDesigner,
author = {Gabriel, Richard P.},
title = {Designed as Designer},
year = {2008},
isbn = {9781605582153},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1449764.1449813},
doi = {10.1145/1449764.1449813},
abstract = {Conceptual integrity arises not (simply) from one mind or from a small number of agreeing
resonant minds, but from sometimes hidden co-authors and the thing designed itself.},
booktitle = {Proceedings of the 23rd ACM SIGPLAN Conference on Object-Oriented Programming Systems Languages and Applications},
pages = {617–632},
numpages = {16},
keywords = {conceptual integrity, design},
location = {Nashville, TN, USA},
series = {OOPSLA '08}
}
@inproceedings{LispEvolve,
author = {Steele, Guy L. and Gabriel, Richard P.},
title = {The Evolution of Lisp},
year = {1993},
isbn = {0897915704},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/154766.155373},
doi = {10.1145/154766.155373},
booktitle = {The Second ACM SIGPLAN Conference on History of Programming Languages},
pages = {231–270},
numpages = {40},
location = {Cambridge, Massachusetts, USA},
series = {HOPL-II}
}
@article{ProgProgLang,
author = {Felleisen, Matthias and Findler, Robert Bruce and Flatt, Matthew and Krishnamurthi, Shriram and Barzilay, Eli and McCarthy, Jay and Tobin-Hochstadt, Sam},
title = {A Programmable Programming Language},
year = {2018},
issue_date = {March 2018},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {61},
number = {3},
issn = {0001-0782},
url = {https://doi.org/10.1145/3127323},
doi = {10.1145/3127323},
abstract = {As the software industry enters the era of language-oriented programming, it needs
programmable programming languages.},
journal = {Commun. ACM},
month = feb,
pages = {62–71},
numpages = {10}
}
@article{LispIntro,
author = {Foderaro, John},
title = {LISP: Introduction},
year = {1991},
issue_date = {Sept. 1991},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {34},
number = {9},
issn = {0001-0782},
url = {https://doi.org/10.1145/114669.114670},
doi = {10.1145/114669.114670},
journal = {Commun. ACM},
month = sep,
pages = {27},
numpages = {1}
}
@book{LISP15,
author = {McCarthy, John},
title = {LISP 1.5 Programmer's Manual},
year = {1962},
isbn = {0262130114},
publisher = {The MIT Press}
}
@inproceedings{SocioPLT,
author = {Meyerovich, Leo A. and Rabkin, Ariel S.},
title = {Socio-PLT: Principles for Programming Language Adoption},
year = {2012},
isbn = {9781450315623},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2384592.2384597},
doi = {10.1145/2384592.2384597},
booktitle = {Proceedings of the ACM International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software},
pages = {39–54},
numpages = {16},
keywords = {sociology, history, programming language adoption},
location = {Tucson, Arizona, USA},
series = {Onward! 2012}
}
@online{WhatIsSuccess,
url = {https://www.youtube.com/watch?v=uGlzRt-FYto},
author = {Evan Czaplicki},
year = {2018},
}
@article{FullBrain,
author = {Fry, Christopher},
title = {Programming on an Already Full Brain},
year = {1997},
issue_date = {April 1997},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {40},
number = {4},
issn = {0001-0782},
url = {https://doi.org/10.1145/248448.248459},
doi = {10.1145/248448.248459},
journal = {Commun. ACM},
month = {apr},
pages = {55–64},
numpages = {10}
}
@article{BoxerDesign,
author = {Andrea A. diSessa},
title = {A Principled Design for an Integrated Computational Environment},
journal = {Human–Computer Interaction},
volume = {1},
number = {1},
pages = {1-47},
year  = {1985},
publisher = {Taylor \& Francis},
doi = {10.1207/s15327051hci0101\_1},
URL = { https://doi.org/10.1207/s15327051hci0101_1 },
}
@book{MMM,
author = {Brooks, Frederick P.},
title = {The  Mythical Man-Month: Essays on Softw},
year = {1978},
isbn = {0201006502},
publisher = {Addison-Wesley Longman Publishing Co., Inc.},
address = {USA},
edition = {1st}
}
@article{PoMoProNotes,
author = {Noble, James and Biddle, Robert},
title = {Notes on Notes on Postmodern Programming},
year = {2004},
issue_date = {December 2004},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {39},
number = {12},
issn = {0362-1340},
url = {https://doi.org/10.1145/1052883.1052890},
doi = {10.1145/1052883.1052890},
journal = {SIGPLAN Not.},
month = {dec},
pages = {40–56},
numpages = {17},
keywords = {object-oriented design, object-oriented programming}
}
@inproceedings{Wildcard,
author = {Litt, Geoffrey and Jackson, Daniel and Millis, Tyler and Quaye, Jessica},
title = {End-User Software Customization by Direct Manipulation of Tabular Data},
year = {2020},
isbn = {9781450381789},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3426428.3426914},
doi = {10.1145/3426428.3426914},
booktitle = {Proceedings of the 2020 ACM SIGPLAN International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software},
pages = {18–33},
numpages = {16},
keywords = {browser extensions, web automation, end user programming, spreadsheets, software customization},
location = {Virtual, USA},
series = {Onward! 2020}
}
@online{APIdesign,
title = {How to Design a Good API and Why it Matters},
url = {http://www.cs.bc.edu/~muller/teaching/cs102/s06/lib/pdf/api-design},
author = {Joshua Bloch},
year = "2007",
}
@online{COLAs,
  title = "Accessible Language-Based Environments of Recursive Theories",
  url = "http://www.vpri.org/pdf/rn2006001a_colaswp.pdf",
  author = "Ian Piumarta",
  year = "2006",
}
@phdthesis{PRinPLs,
  title = "Procedural Reflection in Programming Languages",
  url = "https://dspace.mit.edu/handle/1721.1/15961",
  author = "Brian Cantwell Smith",
  school = "Massachusetts Institute of Technology",
  year = "1982",
}
@phdthesis{Hancock2003,
  author = {C. Hancock and M. Resnick},
  title  = {Real-time programming and the big ideas of computational literacy},
  year   = {2003},
  school = {Massachusetts Institute of Technology},
  url    = {https://dspace.mit.edu/handle/1721.1/61549}
}
@online{Infusion,
  title  = {Infusion Framework and Components},
  url    = {https://fluidproject.org/infusion.html},
  author = {Antranig Basman},
  year   = {2021}
}
@article{PersonalDynMedia,
  author={Kay, A. and Goldberg, A.},
  journal={Computer},
  title={Personal Dynamic Media},
  year={1977},
  volume={10},
  number={3},
  pages={31-41},
  doi={10.1109/C-M.1977.217672}
}
@phdthesis{NakedObjects,
    title={Naked Objects},
    author={Pawson, Richard},
    year={2004},
    school={Trinity College, University of Dublin},
    type={PhD thesis}
}
@article{LiterateProg,
  title={Literate programming},
  author={Knuth, Donald Ervin},
  journal={The computer journal},
  volume={27},
  number={2},
  pages={97--111},
  year={1984},
  publisher={Oxford University Press}
}
@inproceedings{TedNelson,
author = {Nelson, T. H.},
title = {Complex Information Processing: A File Structure for the Complex, the Changing and the Indeterminate},
year = {1965},
isbn = {9781450374958},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800197.806036},
doi = {10.1145/800197.806036},
abstract = {THE KINDS OF FILE structures required if we are to use the computer for personal files and as an adjunct to creativity are wholly different in character from those customary in business and scientific data processing. They need to provide the capacity for intricate and idiosyncratic arrangements, total modifiability, undecided alternatives, and thorough internal documentation.I want to explain how some ideas developed and what they are. The original problem was to specify a computer system for personal information retrieval and documentation, able to do some rather complicated things in clear and simple ways.In this paper I will explain the original problem. Then I will explain why the problem is not simple, and why the solution (a file structure) must yet be very simple. The file structure suggested here is the Evolutionary List File, to be built of zippered lists. A number of uses will be suggested for such a file, to show the breadth of its potential usefulness. Finally, I want to explain the philosophical implications of this approach for information retrieval and data structure in a changing world.},
booktitle = {Proceedings of the 1965 20th National Conference},
pages = {84–100},
numpages = {17},
location = {Cleveland, Ohio, USA},
series = {ACM '65}
}
